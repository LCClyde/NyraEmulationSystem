# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nes', [dirname(__file__)])
        except ImportError:
            import _nes
            return _nes
        if fp is not None:
            try:
                _mod = imp.load_module('_nes', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nes = swig_import_helper()
    del swig_import_helper
else:
    import _nes
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nes.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _nes.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _nes.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _nes.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _nes.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _nes.SwigPyIterator_equal(self, x)

    def copy(self):
        return _nes.SwigPyIterator_copy(self)

    def next(self):
        return _nes.SwigPyIterator_next(self)

    def __next__(self):
        return _nes.SwigPyIterator___next__(self)

    def previous(self):
        return _nes.SwigPyIterator_previous(self)

    def advance(self, n):
        return _nes.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _nes.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _nes.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _nes.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _nes.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _nes.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _nes.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _nes.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Memory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Memory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Memory, name)
    __repr__ = _swig_repr

    def __init__(self, size):
        this = _nes.new_Memory(size)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _nes.delete_Memory
    __del__ = lambda self: None

    def write_byte(self, address, value):
        return _nes.Memory_write_byte(self, address, value)

    def read_byte(self, address):
        return _nes.Memory_read_byte(self, address)

    def read_short(self, address):
        return _nes.Memory_read_short(self, address)

    def get_size(self):
        return _nes.Memory_get_size(self)
Memory_swigregister = _nes.Memory_swigregister
Memory_swigregister(Memory)
cvar = _nes.cvar
flag_size = cvar.flag_size
screen_width = cvar.screen_width
screen_height = cvar.screen_height
num_pixels = cvar.num_pixels

class ROM(Memory):
    __swig_setmethods__ = {}
    for _s in [Memory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ROM, name, value)
    __swig_getmethods__ = {}
    for _s in [Memory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ROM, name)
    __repr__ = _swig_repr

    def __init__(self, buffer, size, takeOwnership=False):
        this = _nes.new_ROM(buffer, size, takeOwnership)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _nes.delete_ROM
    __del__ = lambda self: None

    def read_byte(self, address):
        return _nes.ROM_read_byte(self, address)

    def read_short(self, address):
        return _nes.ROM_read_short(self, address)
ROM_swigregister = _nes.ROM_swigregister
ROM_swigregister(ROM)

class RAM(ROM):
    __swig_setmethods__ = {}
    for _s in [ROM]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RAM, name, value)
    __swig_getmethods__ = {}
    for _s in [ROM]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RAM, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nes.new_RAM(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def write_byte(self, address, value):
        return _nes.RAM_write_byte(self, address, value)
    __swig_destroy__ = _nes.delete_RAM
    __del__ = lambda self: None
RAM_swigregister = _nes.RAM_swigregister
RAM_swigregister(RAM)

class Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Header, name)
    __repr__ = _swig_repr
    HORIZONTAL = _nes.Header_HORIZONTAL
    VERTICAL = _nes.Header_VERTICAL

    def __init__(self, binary):
        this = _nes.new_Header(binary)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_prog_rom_size(self):
        return _nes.Header_get_prog_rom_size(self)

    def get_chr_rom_size(self):
        return _nes.Header_get_chr_rom_size(self)

    def get_mapper_number(self):
        return _nes.Header_get_mapper_number(self)

    def get_is_four_screen_mode(self):
        return _nes.Header_get_is_four_screen_mode(self)

    def get_has_trainer(self):
        return _nes.Header_get_has_trainer(self)

    def get_has_battery_back(self):
        return _nes.Header_get_has_battery_back(self)

    def get_mirroring(self):
        return _nes.Header_get_mirroring(self)

    def get_is_play_choice_10(self):
        return _nes.Header_get_is_play_choice_10(self)

    def get_is_vs_unisystem(self):
        return _nes.Header_get_is_vs_unisystem(self)

    def get_is_nes_2_0(self):
        return _nes.Header_get_is_nes_2_0(self)

    def get_header_size(self):
        return _nes.Header_get_header_size(self)

    def get_nesidentifier(self):
        return _nes.Header_get_nesidentifier(self)

    def __str__(self):
        return _nes.Header___str__(self)
    __swig_destroy__ = _nes.delete_Header
    __del__ = lambda self: None
Header_swigregister = _nes.Header_swigregister
Header_swigregister(Header)


def __lshift__(os, header):
    return _nes.__lshift__(os, header)
__lshift__ = _nes.__lshift__
class Cartridge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cartridge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cartridge, name)
    __repr__ = _swig_repr

    def __init__(self, pathname):
        this = _nes.new_Cartridge(pathname)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_prog_rom(self):
        return _nes.Cartridge_get_prog_rom(self)

    def get_chr_rom(self):
        return _nes.Cartridge_get_chr_rom(self)
    __swig_getmethods__["header"] = _nes.Cartridge_header_get
    if _newclass:
        header = _swig_property(_nes.Cartridge_header_get)
    __swig_destroy__ = _nes.delete_Cartridge
    __del__ = lambda self: None
Cartridge_swigregister = _nes.Cartridge_swigregister
Cartridge_swigregister(Cartridge)


_nes.CARRY_swigconstant(_nes)
CARRY = _nes.CARRY

_nes.ZERO_swigconstant(_nes)
ZERO = _nes.ZERO

_nes.INTERRUPT_swigconstant(_nes)
INTERRUPT = _nes.INTERRUPT

_nes.DECIMAL_swigconstant(_nes)
DECIMAL = _nes.DECIMAL

_nes.STACK_swigconstant(_nes)
STACK = _nes.STACK

_nes.IGNORE_swigconstant(_nes)
IGNORE = _nes.IGNORE

_nes.OFLOW_swigconstant(_nes)
OFLOW = _nes.OFLOW

_nes.SIGN_swigconstant(_nes)
SIGN = _nes.SIGN
class CPURegisters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPURegisters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPURegisters, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nes.new_CPURegisters()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["accumulator"] = _nes.CPURegisters_accumulator_set
    __swig_getmethods__["accumulator"] = _nes.CPURegisters_accumulator_get
    if _newclass:
        accumulator = _swig_property(_nes.CPURegisters_accumulator_get, _nes.CPURegisters_accumulator_set)
    __swig_setmethods__["x_index"] = _nes.CPURegisters_x_index_set
    __swig_getmethods__["x_index"] = _nes.CPURegisters_x_index_get
    if _newclass:
        x_index = _swig_property(_nes.CPURegisters_x_index_get, _nes.CPURegisters_x_index_set)
    __swig_setmethods__["y_index"] = _nes.CPURegisters_y_index_set
    __swig_getmethods__["y_index"] = _nes.CPURegisters_y_index_get
    if _newclass:
        y_index = _swig_property(_nes.CPURegisters_y_index_get, _nes.CPURegisters_y_index_set)
    __swig_setmethods__["stack_pointer"] = _nes.CPURegisters_stack_pointer_set
    __swig_getmethods__["stack_pointer"] = _nes.CPURegisters_stack_pointer_get
    if _newclass:
        stack_pointer = _swig_property(_nes.CPURegisters_stack_pointer_get, _nes.CPURegisters_stack_pointer_set)
    __swig_setmethods__["status_register"] = _nes.CPURegisters_status_register_set
    __swig_getmethods__["status_register"] = _nes.CPURegisters_status_register_get
    if _newclass:
        status_register = _swig_property(_nes.CPURegisters_status_register_get, _nes.CPURegisters_status_register_set)

    def get_status(self):
        return _nes.CPURegisters_get_status(self)
    __swig_destroy__ = _nes.delete_CPURegisters
    __del__ = lambda self: None
CPURegisters_swigregister = _nes.CPURegisters_swigregister
CPURegisters_swigregister(CPURegisters)

class CPUInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPUInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPUInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nes.new_CPUInfo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["program_counter"] = _nes.CPUInfo_program_counter_set
    __swig_getmethods__["program_counter"] = _nes.CPUInfo_program_counter_get
    if _newclass:
        program_counter = _swig_property(_nes.CPUInfo_program_counter_get, _nes.CPUInfo_program_counter_set)
    __swig_setmethods__["cycles"] = _nes.CPUInfo_cycles_set
    __swig_getmethods__["cycles"] = _nes.CPUInfo_cycles_get
    if _newclass:
        cycles = _swig_property(_nes.CPUInfo_cycles_get, _nes.CPUInfo_cycles_set)
    __swig_setmethods__["scan_line"] = _nes.CPUInfo_scan_line_set
    __swig_getmethods__["scan_line"] = _nes.CPUInfo_scan_line_get
    if _newclass:
        scan_line = _swig_property(_nes.CPUInfo_scan_line_get, _nes.CPUInfo_scan_line_set)
    __swig_setmethods__["generate_nmi"] = _nes.CPUInfo_generate_nmi_set
    __swig_getmethods__["generate_nmi"] = _nes.CPUInfo_generate_nmi_get
    if _newclass:
        generate_nmi = _swig_property(_nes.CPUInfo_generate_nmi_get, _nes.CPUInfo_generate_nmi_set)
    __swig_destroy__ = _nes.delete_CPUInfo
    __del__ = lambda self: None
CPUInfo_swigregister = _nes.CPUInfo_swigregister
CPUInfo_swigregister(CPUInfo)

class CPUArgs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPUArgs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPUArgs, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nes.new_CPUArgs()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["opcode"] = _nes.CPUArgs_opcode_set
    __swig_getmethods__["opcode"] = _nes.CPUArgs_opcode_get
    if _newclass:
        opcode = _swig_property(_nes.CPUArgs_opcode_get, _nes.CPUArgs_opcode_set)
    __swig_setmethods__["arg1"] = _nes.CPUArgs_arg1_set
    __swig_getmethods__["arg1"] = _nes.CPUArgs_arg1_get
    if _newclass:
        arg1 = _swig_property(_nes.CPUArgs_arg1_get, _nes.CPUArgs_arg1_set)
    __swig_setmethods__["arg2"] = _nes.CPUArgs_arg2_set
    __swig_getmethods__["arg2"] = _nes.CPUArgs_arg2_get
    if _newclass:
        arg2 = _swig_property(_nes.CPUArgs_arg2_get, _nes.CPUArgs_arg2_set)
    __swig_setmethods__["darg"] = _nes.CPUArgs_darg_set
    __swig_getmethods__["darg"] = _nes.CPUArgs_darg_get
    if _newclass:
        darg = _swig_property(_nes.CPUArgs_darg_get, _nes.CPUArgs_darg_set)
    __swig_destroy__ = _nes.delete_CPUArgs
    __del__ = lambda self: None
CPUArgs_swigregister = _nes.CPUArgs_swigregister
CPUArgs_swigregister(CPUArgs)

class HiLowLatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HiLowLatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HiLowLatch, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nes.new_HiLowLatch()
        try:
            self.this.append(this)
        except:
            self.this = this

    def set(self, value):
        return _nes.HiLowLatch_set(self, value)

    def set_low(self, value):
        return _nes.HiLowLatch_set_low(self, value)

    def set_high(self, value):
        return _nes.HiLowLatch_set_high(self, value)

    def reset(self):
        return _nes.HiLowLatch_reset(self)

    def get(self):
        return _nes.HiLowLatch_get(self)

    def inc(self, amount):
        return _nes.HiLowLatch_inc(self, amount)
    __swig_destroy__ = _nes.delete_HiLowLatch
    __del__ = lambda self: None
HiLowLatch_swigregister = _nes.HiLowLatch_swigregister
HiLowLatch_swigregister(HiLowLatch)

class MemoryMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryMap, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _nes.delete_MemoryMap
    __del__ = lambda self: None

    def set_memory_bank(self, memoryOffset, memory):
        return _nes.MemoryMap_set_memory_bank(self, memoryOffset, memory)

    def write_byte(self, address, value):
        return _nes.MemoryMap_write_byte(self, address, value)

    def get_op_info(self, address, args):
        return _nes.MemoryMap_get_op_info(self, address, args)

    def read_byte(self, address):
        return _nes.MemoryMap_read_byte(self, address)

    def read_short(self, address):
        return _nes.MemoryMap_read_short(self, address)

    def __init__(self):
        this = _nes.new_MemoryMap()
        try:
            self.this.append(this)
        except:
            self.this = this
MemoryMap_swigregister = _nes.MemoryMap_swigregister
MemoryMap_swigregister(MemoryMap)

class OamDma(Memory):
    __swig_setmethods__ = {}
    for _s in [Memory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OamDma, name, value)
    __swig_getmethods__ = {}
    for _s in [Memory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OamDma, name)
    __repr__ = _swig_repr

    def __init__(self, spriteRamAddress):
        this = _nes.new_OamDma(spriteRamAddress)
        try:
            self.this.append(this)
        except:
            self.this = this

    def read_byte(self, arg2):
        return _nes.OamDma_read_byte(self, arg2)

    def write_byte(self, arg2, value):
        return _nes.OamDma_write_byte(self, arg2, value)

    def get_register(self):
        return _nes.OamDma_get_register(self)
    __swig_destroy__ = _nes.delete_OamDma
    __del__ = lambda self: None
OamDma_swigregister = _nes.OamDma_swigregister
OamDma_swigregister(OamDma)

class PPURegisters(Memory):
    __swig_setmethods__ = {}
    for _s in [Memory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PPURegisters, name, value)
    __swig_getmethods__ = {}
    for _s in [Memory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PPURegisters, name)
    __repr__ = _swig_repr
    PPUCTRL = _nes.PPURegisters_PPUCTRL
    PPUMASK = _nes.PPURegisters_PPUMASK
    PPUSTATUS = _nes.PPURegisters_PPUSTATUS
    OAMADDR = _nes.PPURegisters_OAMADDR
    OAMDATA = _nes.PPURegisters_OAMDATA
    PPUSCROLL = _nes.PPURegisters_PPUSCROLL
    PPUADDR = _nes.PPURegisters_PPUADDR
    PPUDATA = _nes.PPURegisters_PPUDATA
    MAX_REGISTER = _nes.PPURegisters_MAX_REGISTER
    OAMDMA = _nes.PPURegisters_OAMDMA
    SPRITE_OFLOW = _nes.PPURegisters_SPRITE_OFLOW
    SPIRTE_HIT_0 = _nes.PPURegisters_SPIRTE_HIT_0
    VBLANK = _nes.PPURegisters_VBLANK
    NAMETABLE_ADDRESS_LOW = _nes.PPURegisters_NAMETABLE_ADDRESS_LOW
    NAMETABLE_ADDRESS_HIGH = _nes.PPURegisters_NAMETABLE_ADDRESS_HIGH
    VRAM_INC = _nes.PPURegisters_VRAM_INC
    SPRITE_PATTERN_TABLE = _nes.PPURegisters_SPRITE_PATTERN_TABLE
    BACKGROUND_PATTERN_TABLE = _nes.PPURegisters_BACKGROUND_PATTERN_TABLE
    SPRITE_SIZE = _nes.PPURegisters_SPRITE_SIZE
    MASTER_SLAVE = _nes.PPURegisters_MASTER_SLAVE
    NMI_ENABLED = _nes.PPURegisters_NMI_ENABLED
    GRAYSCALE = _nes.PPURegisters_GRAYSCALE
    BACKGROUND_LEFTMOST = _nes.PPURegisters_BACKGROUND_LEFTMOST
    SPRITES_LEFTMOST = _nes.PPURegisters_SPRITES_LEFTMOST
    SHOW_BACKGROUND = _nes.PPURegisters_SHOW_BACKGROUND
    SHOW_SPRITES = _nes.PPURegisters_SHOW_SPRITES
    EMPHASIZE_REF = _nes.PPURegisters_EMPHASIZE_REF
    EMPHASIZE_GREEN = _nes.PPURegisters_EMPHASIZE_GREEN
    EMPHASIZE_BLUE = _nes.PPURegisters_EMPHASIZE_BLUE

    def __init__(self, vram):
        this = _nes.new_PPURegisters(vram)
        try:
            self.this.append(this)
        except:
            self.this = this

    def read_byte(self, address):
        return _nes.PPURegisters_read_byte(self, address)

    def write_byte(self, address, value):
        return _nes.PPURegisters_write_byte(self, address, value)

    def get_register(self, reg):
        return _nes.PPURegisters_get_register(self, reg)

    def get_oam_dma(self):
        return _nes.PPURegisters_get_oam_dma(self)

    def get_sprite_ram_address(self):
        return _nes.PPURegisters_get_sprite_ram_address(self)
    __swig_destroy__ = _nes.delete_PPURegisters
    __del__ = lambda self: None
PPURegisters_swigregister = _nes.PPURegisters_swigregister
PPURegisters_swigregister(PPURegisters)

class PPU(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PPU, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PPU, name)
    __repr__ = _swig_repr

    def __init__(self, chrROM):
        this = _nes.new_PPU(chrROM)
        try:
            self.this.append(this)
        except:
            self.this = this

    def process_scanline(self, info, memory, buffer=None):
        return _nes.PPU_process_scanline(self, info, memory, buffer)

    def render_scanline(self, scanLine, memory, buffer=None):
        return _nes.PPU_render_scanline(self, scanLine, memory, buffer)

    def extract_pixel(self, address, bitPosition, palette):
        return _nes.PPU_extract_pixel(self, address, bitPosition, palette)

    def get_regisers(self):
        return _nes.PPU_get_regisers(self)

    def get_registers(self):
        return _nes.PPU_get_registers(self)
    __swig_destroy__ = _nes.delete_PPU
    __del__ = lambda self: None
PPU_swigregister = _nes.PPU_swigregister
PPU_swigregister(PPU)


def create_memory_map(cart, ppu):
    return _nes.create_memory_map(cart, ppu)
create_memory_map = _nes.create_memory_map
class Mode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mode, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nes.delete_Mode
    __del__ = lambda self: None

    def to_string(self):
        return _nes.Mode_to_string(self)

    def get_arg(self):
        return _nes.Mode_get_arg(self)

    def get_value(self):
        return _nes.Mode_get_value(self)

    def __call__(self, args, registers, memory, info):
        return _nes.Mode___call__(self, args, registers, memory, info)
    __swig_getmethods__["uses_arg1"] = _nes.Mode_uses_arg1_get
    if _newclass:
        uses_arg1 = _swig_property(_nes.Mode_uses_arg1_get)
    __swig_getmethods__["uses_arg2"] = _nes.Mode_uses_arg2_get
    if _newclass:
        uses_arg2 = _swig_property(_nes.Mode_uses_arg2_get)
Mode_swigregister = _nes.Mode_swigregister
Mode_swigregister(Mode)

class OpCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpCode, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nes.delete_OpCode
    __del__ = lambda self: None

    def __call__(self, args, registers, info, memory):
        return _nes.OpCode___call__(self, args, registers, info, memory)

    def get_extended_name(self):
        return _nes.OpCode_get_extended_name(self)

    def get_op_code(self):
        return _nes.OpCode_get_op_code(self)
    __swig_getmethods__["mode"] = _nes.OpCode_mode_get
    if _newclass:
        mode = _swig_property(_nes.OpCode_mode_get)
    __swig_getmethods__["name"] = _nes.OpCode_name_get
    if _newclass:
        name = _swig_property(_nes.OpCode_name_get)
OpCode_swigregister = _nes.OpCode_swigregister
OpCode_swigregister(OpCode)


def allocate_op_codes(opCodes):
    return _nes.allocate_op_codes(opCodes)
allocate_op_codes = _nes.allocate_op_codes
class Disassembly(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Disassembly, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Disassembly, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nes.new_Disassembly(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_mode_string(self, mode):
        return _nes.Disassembly_set_mode_string(self, mode)
    __swig_getmethods__["opcode"] = _nes.Disassembly_opcode_get
    if _newclass:
        opcode = _swig_property(_nes.Disassembly_opcode_get)
    __swig_getmethods__["info"] = _nes.Disassembly_info_get
    if _newclass:
        info = _swig_property(_nes.Disassembly_info_get)
    __swig_getmethods__["registers"] = _nes.Disassembly_registers_get
    if _newclass:
        registers = _swig_property(_nes.Disassembly_registers_get)
    __swig_getmethods__["args"] = _nes.Disassembly_args_get
    if _newclass:
        args = _swig_property(_nes.Disassembly_args_get)
    __swig_getmethods__["mode_string"] = _nes.Disassembly_mode_string_get
    if _newclass:
        mode_string = _swig_property(_nes.Disassembly_mode_string_get)
    __swig_destroy__ = _nes.delete_Disassembly
    __del__ = lambda self: None
Disassembly_swigregister = _nes.Disassembly_swigregister
Disassembly_swigregister(Disassembly)

class CPU(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPU, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPU, name)
    __repr__ = _swig_repr

    def __init__(self, startAddress):
        this = _nes.new_CPU(startAddress)
        try:
            self.this.append(this)
        except:
            self.this = this

    def process_scanline(self, *args):
        return _nes.CPU_process_scanline(self, *args)

    def get_info(self, *args):
        return _nes.CPU_get_info(self, *args)
    __swig_destroy__ = _nes.delete_CPU
    __del__ = lambda self: None
CPU_swigregister = _nes.CPU_swigregister
CPU_swigregister(CPU)

class Emulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Emulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Emulator, name)
    __repr__ = _swig_repr

    def __init__(self, pathname):
        this = _nes.new_Emulator(pathname)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_ppu(self, *args):
        return _nes.Emulator_get_ppu(self, *args)

    def tick(self, *args):
        return _nes.Emulator_tick(self, *args)
    __swig_destroy__ = _nes.delete_Emulator
    __del__ = lambda self: None
Emulator_swigregister = _nes.Emulator_swigregister
Emulator_swigregister(Emulator)

class DisassemblyVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisassemblyVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DisassemblyVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nes.DisassemblyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nes.DisassemblyVector___nonzero__(self)

    def __bool__(self):
        return _nes.DisassemblyVector___bool__(self)

    def __len__(self):
        return _nes.DisassemblyVector___len__(self)

    def pop(self):
        return _nes.DisassemblyVector_pop(self)

    def __getslice__(self, i, j):
        return _nes.DisassemblyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nes.DisassemblyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nes.DisassemblyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nes.DisassemblyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nes.DisassemblyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nes.DisassemblyVector___setitem__(self, *args)

    def append(self, x):
        return _nes.DisassemblyVector_append(self, x)

    def empty(self):
        return _nes.DisassemblyVector_empty(self)

    def size(self):
        return _nes.DisassemblyVector_size(self)

    def clear(self):
        return _nes.DisassemblyVector_clear(self)

    def swap(self, v):
        return _nes.DisassemblyVector_swap(self, v)

    def get_allocator(self):
        return _nes.DisassemblyVector_get_allocator(self)

    def begin(self):
        return _nes.DisassemblyVector_begin(self)

    def end(self):
        return _nes.DisassemblyVector_end(self)

    def rbegin(self):
        return _nes.DisassemblyVector_rbegin(self)

    def rend(self):
        return _nes.DisassemblyVector_rend(self)

    def pop_back(self):
        return _nes.DisassemblyVector_pop_back(self)

    def erase(self, *args):
        return _nes.DisassemblyVector_erase(self, *args)

    def __init__(self, *args):
        this = _nes.new_DisassemblyVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _nes.DisassemblyVector_push_back(self, x)

    def front(self):
        return _nes.DisassemblyVector_front(self)

    def back(self):
        return _nes.DisassemblyVector_back(self)

    def assign(self, n, x):
        return _nes.DisassemblyVector_assign(self, n, x)

    def resize(self, *args):
        return _nes.DisassemblyVector_resize(self, *args)

    def insert(self, *args):
        return _nes.DisassemblyVector_insert(self, *args)

    def reserve(self, n):
        return _nes.DisassemblyVector_reserve(self, n)

    def capacity(self):
        return _nes.DisassemblyVector_capacity(self)
    __swig_destroy__ = _nes.delete_DisassemblyVector
    __del__ = lambda self: None
DisassemblyVector_swigregister = _nes.DisassemblyVector_swigregister
DisassemblyVector_swigregister(DisassemblyVector)

class PixelVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nes.PixelVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nes.PixelVector___nonzero__(self)

    def __bool__(self):
        return _nes.PixelVector___bool__(self)

    def __len__(self):
        return _nes.PixelVector___len__(self)

    def pop(self):
        return _nes.PixelVector_pop(self)

    def __getslice__(self, i, j):
        return _nes.PixelVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nes.PixelVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nes.PixelVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nes.PixelVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nes.PixelVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nes.PixelVector___setitem__(self, *args)

    def append(self, x):
        return _nes.PixelVector_append(self, x)

    def empty(self):
        return _nes.PixelVector_empty(self)

    def size(self):
        return _nes.PixelVector_size(self)

    def clear(self):
        return _nes.PixelVector_clear(self)

    def swap(self, v):
        return _nes.PixelVector_swap(self, v)

    def get_allocator(self):
        return _nes.PixelVector_get_allocator(self)

    def begin(self):
        return _nes.PixelVector_begin(self)

    def end(self):
        return _nes.PixelVector_end(self)

    def rbegin(self):
        return _nes.PixelVector_rbegin(self)

    def rend(self):
        return _nes.PixelVector_rend(self)

    def pop_back(self):
        return _nes.PixelVector_pop_back(self)

    def erase(self, *args):
        return _nes.PixelVector_erase(self, *args)

    def __init__(self, *args):
        this = _nes.new_PixelVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _nes.PixelVector_push_back(self, x)

    def front(self):
        return _nes.PixelVector_front(self)

    def back(self):
        return _nes.PixelVector_back(self)

    def assign(self, n, x):
        return _nes.PixelVector_assign(self, n, x)

    def resize(self, *args):
        return _nes.PixelVector_resize(self, *args)

    def insert(self, *args):
        return _nes.PixelVector_insert(self, *args)

    def reserve(self, n):
        return _nes.PixelVector_reserve(self, n)

    def capacity(self):
        return _nes.PixelVector_capacity(self)
    __swig_destroy__ = _nes.delete_PixelVector
    __del__ = lambda self: None
PixelVector_swigregister = _nes.PixelVector_swigregister
PixelVector_swigregister(PixelVector)

# This file is compatible with both classic and new-style classes.


